{"version":3,"sources":["components/Circle/styles.module.css","App.module.css","utils/getRandomInt.js","components/Circle/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomInt","min","max","Math","ceil","floor","random","Circle","size","sizeOffset","i","useState","sizeState","setSizeState","color","setColor","useEffect","randomColor","hoverState","normalState","className","styles","circle","onMouseEnter","onMouseLeave","onTouchStart","onTouchEnd","onTouchCancel","style","width","height","borderColor","defaultProps","App","maxSize","setMaxSize","updateWhenResize","window","addEventListener","removeEventListener","_maxSize","innerWidth","innerHeight","circleComp","sizeDif","push","key","circles","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,IAAM,mB,8JCDT,SAASC,EAAaC,EAAKC,GAGxC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,IAAQA,ECEnD,IAEMM,EAAS,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,WAAoB,KAARC,EACAC,mBAASH,IADD,mBACnCI,EADmC,KACxBC,EADwB,OAEhBF,mBAJV,sBAE0B,mBAEnCG,EAFmC,KAE5BC,EAF4B,KAI1CC,qBAAU,WACRH,EAAaL,KACZ,CAACA,IAEJ,IAAMS,EAAc,WAClB,MAAM,OAAN,OAAcjB,EAAa,EAAG,KAA9B,aAAuCA,EACrC,EACA,KAFF,aAGMA,EAAa,EAAG,KAHtB,MAMIkB,EAAa,WACjBL,EAAab,EAAaQ,EAAOC,EAAYD,EAAOC,IACpDM,EAASE,IAGLE,EAAc,WAClBJ,EAvBc,sBAwBdF,EAAaL,IAGf,OACE,yBACEY,UAAWC,IAAOC,OAClBC,aAAcL,EACdM,aAAcL,EACdM,aAAcP,EACdQ,WAAYP,EACZQ,cAAeR,EACfS,MAAO,CACLC,MAAM,GAAD,OAAKjB,EAAL,MACLkB,OAAO,GAAD,OAAKlB,EAAL,MACNmB,YAAajB,MAWrBP,EAAOyB,aAAe,CACpBxB,KAAM,EACNC,WAAY,IAGCF,Q,gBClBA0B,EAlCH,WAAO,IAAD,EACctB,mBAAS,KADvB,mBACTuB,EADS,KACAC,EADA,KAGhBnB,qBAAU,WAGR,OAFAoB,IACAC,OAAOC,iBAAiB,SAAUF,GAC3B,kBAAMC,OAAOE,oBAAoB,SAAUH,MACjD,IAEH,IAeMA,EAAmB,WACvB,IAAMI,EACJH,OAAOI,WAAaJ,OAAOK,YACvBL,OAAOK,YACPL,OAAOI,WACbN,EAAWK,EAAW,KAExB,OAAO,yBAAKpB,UAAWC,IAAOY,KAtBd,SAAAC,GAKd,IAJA,IAAMS,EAAa,GACfnC,EAAO0B,EACPU,EAAU5C,EAAa,EAdf,IAeRU,EAAI,EACDF,EAAO,GACZmC,EAAWE,KACT,kBAAC,EAAD,CAAQC,IAAG,iBAAYpC,KAAOF,KAAMA,EAAMC,WAAsB,EAAVmC,KAExDpC,GAAQoC,EACRA,EAAU5C,EAAa,EArBb,IAuBZ,OAAO2C,EAU2BI,CAAQb,KC1B1Bc,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0e4114ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"styles_circle__2bdVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","export default function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./styles.module.css\";\nimport getRandomInt from \"../../utils/getRandomInt\";\n\nconst initColor = \"rgb(150, 150, 150)\";\n\nconst Circle = ({ size, sizeOffset, i }) => {\n  const [sizeState, setSizeState] = useState(size);\n  const [color, setColor] = useState(initColor);\n\n  useEffect(() => {\n    setSizeState(size);\n  }, [size]);\n\n  const randomColor = () => {\n    return `rgb(${getRandomInt(0, 255)}, ${getRandomInt(\n      0,\n      255\n    )}, ${getRandomInt(0, 255)})`;\n  };\n\n  const hoverState = () => {\n    setSizeState(getRandomInt(size - sizeOffset, size + sizeOffset));\n    setColor(randomColor);\n  };\n\n  const normalState = () => {\n    setColor(initColor);\n    setSizeState(size);\n  };\n\n  return (\n    <div\n      className={styles.circle}\n      onMouseEnter={hoverState}\n      onMouseLeave={normalState}\n      onTouchStart={hoverState}\n      onTouchEnd={normalState}\n      onTouchCancel={normalState}\n      style={{\n        width: `${sizeState}px`,\n        height: `${sizeState}px`,\n        borderColor: color\n      }}\n    ></div>\n  );\n};\n\nCircle.propTypes = {\n  size: PropTypes.number,\n  sizeOffset: PropTypes.number\n};\n\nCircle.defaultProps = {\n  size: 1,\n  sizeOffset: 10\n};\n\nexport default Circle;\n","import React, { useEffect, useState } from \"react\";\nimport Circle from \"./components/Circle\";\nimport styles from \"./App.module.css\";\nimport getRandomInt from \"./utils/getRandomInt\";\n\nconst maxDiff = 35;\n\nconst App = () => {\n  const [maxSize, setMaxSize] = useState(350);\n\n  useEffect(() => {\n    updateWhenResize();\n    window.addEventListener(\"resize\", updateWhenResize);\n    return () => window.removeEventListener(\"resize\", updateWhenResize);\n  }, []);\n\n  const circles = maxSize => {\n    const circleComp = [];\n    let size = maxSize;\n    let sizeDif = getRandomInt(5, maxDiff);\n    let i = 0;\n    while (size > 0) {\n      circleComp.push(\n        <Circle key={`circle-${i++}`} size={size} sizeOffset={sizeDif * 5} />\n      );\n      size -= sizeDif;\n      sizeDif = getRandomInt(5, maxDiff);\n    }\n    return circleComp;\n  };\n\n  const updateWhenResize = () => {\n    const _maxSize =\n      window.innerWidth > window.innerHeight\n        ? window.innerHeight\n        : window.innerWidth;\n    setMaxSize(_maxSize - 20);\n  };\n  return <div className={styles.App}>{circles(maxSize)}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}